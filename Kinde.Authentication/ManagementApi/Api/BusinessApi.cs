/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Kinde.ManagementApi.Client;
using Kinde.ManagementApi.Model;

namespace Kinde.ManagementApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List business details
        /// </summary>
        /// <remarks>
        /// Get your business details.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Business code.</param>
        /// <param name="name">Business name.</param>
        /// <param name="email">Email associated with business.</param>
        /// <param name="phone">Phone number associated with business. (optional)</param>
        /// <param name="industry">The industry your business is in. (optional)</param>
        /// <param name="timezone">The timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse GetBusiness(string code, string name, string email, string? phone = default(string?), string? industry = default(string?), string? timezone = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?));

        /// <summary>
        /// List business details
        /// </summary>
        /// <remarks>
        /// Get your business details.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Business code.</param>
        /// <param name="name">Business name.</param>
        /// <param name="email">Email associated with business.</param>
        /// <param name="phone">Phone number associated with business. (optional)</param>
        /// <param name="industry">The industry your business is in. (optional)</param>
        /// <param name="timezone">The timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> GetBusinessWithHttpInfo(string code, string name, string email, string? phone = default(string?), string? industry = default(string?), string? timezone = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?));
        /// <summary>
        /// Update business details
        /// </summary>
        /// <remarks>
        /// Update business details.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessName">Business name.</param>
        /// <param name="primaryEmail">Email associated with business.</param>
        /// <param name="primaryPhone">Phone number associated with business. (optional)</param>
        /// <param name="industryKey">The key of the industry your business is in. (optional)</param>
        /// <param name="timezoneId">The ID of the timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="isShowKindeBranding">Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)</param>
        /// <param name="isClickWrap">Show a policy acceptance checkbox on sign up. (optional)</param>
        /// <param name="partnerCode">Your Kinde Perk code. (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse UpdateBusiness(string businessName, string primaryEmail, string? primaryPhone = default(string?), string? industryKey = default(string?), string? timezoneId = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), string? isShowKindeBranding = default(string?), bool? isClickWrap = default(bool?), string? partnerCode = default(string?));

        /// <summary>
        /// Update business details
        /// </summary>
        /// <remarks>
        /// Update business details.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessName">Business name.</param>
        /// <param name="primaryEmail">Email associated with business.</param>
        /// <param name="primaryPhone">Phone number associated with business. (optional)</param>
        /// <param name="industryKey">The key of the industry your business is in. (optional)</param>
        /// <param name="timezoneId">The ID of the timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="isShowKindeBranding">Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)</param>
        /// <param name="isClickWrap">Show a policy acceptance checkbox on sign up. (optional)</param>
        /// <param name="partnerCode">Your Kinde Perk code. (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> UpdateBusinessWithHttpInfo(string businessName, string primaryEmail, string? primaryPhone = default(string?), string? industryKey = default(string?), string? timezoneId = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), string? isShowKindeBranding = default(string?), bool? isClickWrap = default(bool?), string? partnerCode = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List business details
        /// </summary>
        /// <remarks>
        /// Get your business details.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Business code.</param>
        /// <param name="name">Business name.</param>
        /// <param name="email">Email associated with business.</param>
        /// <param name="phone">Phone number associated with business. (optional)</param>
        /// <param name="industry">The industry your business is in. (optional)</param>
        /// <param name="timezone">The timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> GetBusinessAsync(string code, string name, string email, string? phone = default(string?), string? industry = default(string?), string? timezone = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List business details
        /// </summary>
        /// <remarks>
        /// Get your business details.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Business code.</param>
        /// <param name="name">Business name.</param>
        /// <param name="email">Email associated with business.</param>
        /// <param name="phone">Phone number associated with business. (optional)</param>
        /// <param name="industry">The industry your business is in. (optional)</param>
        /// <param name="timezone">The timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> GetBusinessWithHttpInfoAsync(string code, string name, string email, string? phone = default(string?), string? industry = default(string?), string? timezone = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update business details
        /// </summary>
        /// <remarks>
        /// Update business details.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessName">Business name.</param>
        /// <param name="primaryEmail">Email associated with business.</param>
        /// <param name="primaryPhone">Phone number associated with business. (optional)</param>
        /// <param name="industryKey">The key of the industry your business is in. (optional)</param>
        /// <param name="timezoneId">The ID of the timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="isShowKindeBranding">Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)</param>
        /// <param name="isClickWrap">Show a policy acceptance checkbox on sign up. (optional)</param>
        /// <param name="partnerCode">Your Kinde Perk code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> UpdateBusinessAsync(string businessName, string primaryEmail, string? primaryPhone = default(string?), string? industryKey = default(string?), string? timezoneId = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), string? isShowKindeBranding = default(string?), bool? isClickWrap = default(bool?), string? partnerCode = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update business details
        /// </summary>
        /// <remarks>
        /// Update business details.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessName">Business name.</param>
        /// <param name="primaryEmail">Email associated with business.</param>
        /// <param name="primaryPhone">Phone number associated with business. (optional)</param>
        /// <param name="industryKey">The key of the industry your business is in. (optional)</param>
        /// <param name="timezoneId">The ID of the timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="isShowKindeBranding">Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)</param>
        /// <param name="isClickWrap">Show a policy acceptance checkbox on sign up. (optional)</param>
        /// <param name="partnerCode">Your Kinde Perk code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> UpdateBusinessWithHttpInfoAsync(string businessName, string primaryEmail, string? primaryPhone = default(string?), string? industryKey = default(string?), string? timezoneId = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), string? isShowKindeBranding = default(string?), bool? isClickWrap = default(bool?), string? partnerCode = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessApi : IBusinessApiSync, IBusinessApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessApi : IDisposable, IBusinessApi
    {
        private Kinde.ManagementApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public BusinessApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public BusinessApi(string basePath)
        {
            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                new Kinde.ManagementApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public BusinessApi(Kinde.ManagementApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BusinessApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BusinessApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                new Kinde.ManagementApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BusinessApi(HttpClient client, Kinde.ManagementApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public BusinessApi(Kinde.ManagementApi.Client.ISynchronousClient client, Kinde.ManagementApi.Client.IAsynchronousClient asyncClient, Kinde.ManagementApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Kinde.ManagementApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.ManagementApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.ManagementApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.ManagementApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.ManagementApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List business details Get your business details.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Business code.</param>
        /// <param name="name">Business name.</param>
        /// <param name="email">Email associated with business.</param>
        /// <param name="phone">Phone number associated with business. (optional)</param>
        /// <param name="industry">The industry your business is in. (optional)</param>
        /// <param name="timezone">The timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse GetBusiness(string code, string name, string email, string? phone = default(string?), string? industry = default(string?), string? timezone = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?))
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = GetBusinessWithHttpInfo(code, name, email, phone, industry, timezone, privacyUrl, termsUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List business details Get your business details.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Business code.</param>
        /// <param name="name">Business name.</param>
        /// <param name="email">Email associated with business.</param>
        /// <param name="phone">Phone number associated with business. (optional)</param>
        /// <param name="industry">The industry your business is in. (optional)</param>
        /// <param name="timezone">The timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> GetBusinessWithHttpInfo(string code, string name, string email, string? phone = default(string?), string? industry = default(string?), string? timezone = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'code' when calling BusinessApi->GetBusiness");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'name' when calling BusinessApi->GetBusiness");

            // verify the required parameter 'email' is set
            if (email == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'email' when calling BusinessApi->GetBusiness");

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            if (phone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "phone", phone));
            }
            if (industry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "industry", industry));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (privacyUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "privacy_url", privacyUrl));
            }
            if (termsUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "terms_url", termsUrl));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SuccessResponse>("/api/v1/business", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusiness", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List business details Get your business details.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Business code.</param>
        /// <param name="name">Business name.</param>
        /// <param name="email">Email associated with business.</param>
        /// <param name="phone">Phone number associated with business. (optional)</param>
        /// <param name="industry">The industry your business is in. (optional)</param>
        /// <param name="timezone">The timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> GetBusinessAsync(string code, string name, string email, string? phone = default(string?), string? industry = default(string?), string? timezone = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = await GetBusinessWithHttpInfoAsync(code, name, email, phone, industry, timezone, privacyUrl, termsUrl, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List business details Get your business details.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Business code.</param>
        /// <param name="name">Business name.</param>
        /// <param name="email">Email associated with business.</param>
        /// <param name="phone">Phone number associated with business. (optional)</param>
        /// <param name="industry">The industry your business is in. (optional)</param>
        /// <param name="timezone">The timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<SuccessResponse>> GetBusinessWithHttpInfoAsync(string code, string name, string email, string? phone = default(string?), string? industry = default(string?), string? timezone = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'code' when calling BusinessApi->GetBusiness");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'name' when calling BusinessApi->GetBusiness");

            // verify the required parameter 'email' is set
            if (email == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'email' when calling BusinessApi->GetBusiness");


            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            if (phone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "phone", phone));
            }
            if (industry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "industry", industry));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (privacyUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "privacy_url", privacyUrl));
            }
            if (termsUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "terms_url", termsUrl));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SuccessResponse>("/api/v1/business", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusiness", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update business details Update business details.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessName">Business name.</param>
        /// <param name="primaryEmail">Email associated with business.</param>
        /// <param name="primaryPhone">Phone number associated with business. (optional)</param>
        /// <param name="industryKey">The key of the industry your business is in. (optional)</param>
        /// <param name="timezoneId">The ID of the timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="isShowKindeBranding">Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)</param>
        /// <param name="isClickWrap">Show a policy acceptance checkbox on sign up. (optional)</param>
        /// <param name="partnerCode">Your Kinde Perk code. (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse UpdateBusiness(string businessName, string primaryEmail, string? primaryPhone = default(string?), string? industryKey = default(string?), string? timezoneId = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), string? isShowKindeBranding = default(string?), bool? isClickWrap = default(bool?), string? partnerCode = default(string?))
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = UpdateBusinessWithHttpInfo(businessName, primaryEmail, primaryPhone, industryKey, timezoneId, privacyUrl, termsUrl, isShowKindeBranding, isClickWrap, partnerCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update business details Update business details.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessName">Business name.</param>
        /// <param name="primaryEmail">Email associated with business.</param>
        /// <param name="primaryPhone">Phone number associated with business. (optional)</param>
        /// <param name="industryKey">The key of the industry your business is in. (optional)</param>
        /// <param name="timezoneId">The ID of the timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="isShowKindeBranding">Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)</param>
        /// <param name="isClickWrap">Show a policy acceptance checkbox on sign up. (optional)</param>
        /// <param name="partnerCode">Your Kinde Perk code. (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> UpdateBusinessWithHttpInfo(string businessName, string primaryEmail, string? primaryPhone = default(string?), string? industryKey = default(string?), string? timezoneId = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), string? isShowKindeBranding = default(string?), bool? isClickWrap = default(bool?), string? partnerCode = default(string?))
        {
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'businessName' when calling BusinessApi->UpdateBusiness");

            // verify the required parameter 'primaryEmail' is set
            if (primaryEmail == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'primaryEmail' when calling BusinessApi->UpdateBusiness");

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "business_name", businessName));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "primary_email", primaryEmail));
            if (primaryPhone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "primary_phone", primaryPhone));
            }
            if (industryKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "industry_key", industryKey));
            }
            if (timezoneId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "timezone_id", timezoneId));
            }
            if (privacyUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "privacy_url", privacyUrl));
            }
            if (termsUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "terms_url", termsUrl));
            }
            if (isShowKindeBranding != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "is_show_kinde_branding", isShowKindeBranding));
            }
            if (isClickWrap != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "is_click_wrap", isClickWrap));
            }
            if (partnerCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "partner_code", partnerCode));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SuccessResponse>("/api/v1/business", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBusiness", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update business details Update business details.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessName">Business name.</param>
        /// <param name="primaryEmail">Email associated with business.</param>
        /// <param name="primaryPhone">Phone number associated with business. (optional)</param>
        /// <param name="industryKey">The key of the industry your business is in. (optional)</param>
        /// <param name="timezoneId">The ID of the timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="isShowKindeBranding">Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)</param>
        /// <param name="isClickWrap">Show a policy acceptance checkbox on sign up. (optional)</param>
        /// <param name="partnerCode">Your Kinde Perk code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> UpdateBusinessAsync(string businessName, string primaryEmail, string? primaryPhone = default(string?), string? industryKey = default(string?), string? timezoneId = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), string? isShowKindeBranding = default(string?), bool? isClickWrap = default(bool?), string? partnerCode = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = await UpdateBusinessWithHttpInfoAsync(businessName, primaryEmail, primaryPhone, industryKey, timezoneId, privacyUrl, termsUrl, isShowKindeBranding, isClickWrap, partnerCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update business details Update business details.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessName">Business name.</param>
        /// <param name="primaryEmail">Email associated with business.</param>
        /// <param name="primaryPhone">Phone number associated with business. (optional)</param>
        /// <param name="industryKey">The key of the industry your business is in. (optional)</param>
        /// <param name="timezoneId">The ID of the timezone your business is in. (optional)</param>
        /// <param name="privacyUrl">Your Privacy policy URL. (optional)</param>
        /// <param name="termsUrl">Your Terms and Conditions URL. (optional)</param>
        /// <param name="isShowKindeBranding">Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)</param>
        /// <param name="isClickWrap">Show a policy acceptance checkbox on sign up. (optional)</param>
        /// <param name="partnerCode">Your Kinde Perk code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<SuccessResponse>> UpdateBusinessWithHttpInfoAsync(string businessName, string primaryEmail, string? primaryPhone = default(string?), string? industryKey = default(string?), string? timezoneId = default(string?), string? privacyUrl = default(string?), string? termsUrl = default(string?), string? isShowKindeBranding = default(string?), bool? isClickWrap = default(bool?), string? partnerCode = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessName' is set
            if (businessName == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'businessName' when calling BusinessApi->UpdateBusiness");

            // verify the required parameter 'primaryEmail' is set
            if (primaryEmail == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'primaryEmail' when calling BusinessApi->UpdateBusiness");


            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "business_name", businessName));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "primary_email", primaryEmail));
            if (primaryPhone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "primary_phone", primaryPhone));
            }
            if (industryKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "industry_key", industryKey));
            }
            if (timezoneId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "timezone_id", timezoneId));
            }
            if (privacyUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "privacy_url", privacyUrl));
            }
            if (termsUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "terms_url", termsUrl));
            }
            if (isShowKindeBranding != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "is_show_kinde_branding", isShowKindeBranding));
            }
            if (isClickWrap != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "is_click_wrap", isClickWrap));
            }
            if (partnerCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "partner_code", partnerCode));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SuccessResponse>("/api/v1/business", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBusiness", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
