/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.ManagementApi.Client.FileParameter;
using OpenAPIDateConverter = Kinde.ManagementApi.Client.OpenAPIDateConverter;

namespace Kinde.ManagementApi.Model
{
    /// <summary>
    /// CreateCategoryRequest
    /// </summary>
    [DataContract(Name = "CreateCategory_request")]
    public partial class CreateCategoryRequest : IValidatableObject
    {
        /// <summary>
        /// The context that the category applies to.
        /// </summary>
        /// <value>The context that the category applies to.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum Org for value: org
            /// </summary>
            [EnumMember(Value = "org")]
            Org = 1,

            /// <summary>
            /// Enum Usr for value: usr
            /// </summary>
            [EnumMember(Value = "usr")]
            Usr = 2
        }


        /// <summary>
        /// The context that the category applies to.
        /// </summary>
        /// <value>The context that the category applies to.</value>
        [DataMember(Name = "context", IsRequired = true, EmitDefaultValue = true)]
        public ContextEnum Context { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCategoryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCategoryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCategoryRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the category. (required).</param>
        /// <param name="context">The context that the category applies to. (required).</param>
        public CreateCategoryRequest(string name = default(string), ContextEnum context = default(ContextEnum))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateCategoryRequest and cannot be null");
            }
            this.Name = name;
            this.Context = context;
        }

        /// <summary>
        /// The name of the category.
        /// </summary>
        /// <value>The name of the category.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCategoryRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
