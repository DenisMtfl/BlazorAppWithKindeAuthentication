/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Kinde.ManagementApi.Client;
using Kinde.ManagementApi.Api;
// uncomment below to import models
//using Kinde.ManagementApi.Model;

namespace Kinde.ManagementApi.Test.Api
{
    /// <summary>
    ///  Class for testing OrganizationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrganizationsApiTests : IDisposable
    {
        private OrganizationsApi instance;

        public OrganizationsApiTests()
        {
            instance = new OrganizationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OrganizationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OrganizationsApi
            //Assert.IsType<OrganizationsApi>(instance);
        }

        /// <summary>
        /// Test AddOrganizationUsers
        /// </summary>
        [Fact]
        public void AddOrganizationUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //AddOrganizationUsersRequest? addOrganizationUsersRequest = null;
            //var response = instance.AddOrganizationUsers(orgCode, addOrganizationUsersRequest);
            //Assert.IsType<AddOrganizationUsersResponse>(response);
        }

        /// <summary>
        /// Test CreateOrganization
        /// </summary>
        [Fact]
        public void CreateOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateOrganizationRequest createOrganizationRequest = null;
            //var response = instance.CreateOrganization(createOrganizationRequest);
            //Assert.IsType<CreateOrganizationResponse>(response);
        }

        /// <summary>
        /// Test CreateOrganizationUserPermission
        /// </summary>
        [Fact]
        public void CreateOrganizationUserPermissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string userId = null;
            //CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest = null;
            //var response = instance.CreateOrganizationUserPermission(orgCode, userId, createOrganizationUserPermissionRequest);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test CreateOrganizationUserRole
        /// </summary>
        [Fact]
        public void CreateOrganizationUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string userId = null;
            //CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest = null;
            //var response = instance.CreateOrganizationUserRole(orgCode, userId, createOrganizationUserRoleRequest);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test DeleteOrganization
        /// </summary>
        [Fact]
        public void DeleteOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //instance.DeleteOrganization(orgCode);
        }

        /// <summary>
        /// Test DeleteOrganizationFeatureFlagOverride
        /// </summary>
        [Fact]
        public void DeleteOrganizationFeatureFlagOverrideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string featureFlagKey = null;
            //var response = instance.DeleteOrganizationFeatureFlagOverride(orgCode, featureFlagKey);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test DeleteOrganizationFeatureFlagOverrides
        /// </summary>
        [Fact]
        public void DeleteOrganizationFeatureFlagOverridesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //var response = instance.DeleteOrganizationFeatureFlagOverrides(orgCode);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test DeleteOrganizationUserPermission
        /// </summary>
        [Fact]
        public void DeleteOrganizationUserPermissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string userId = null;
            //string permissionId = null;
            //var response = instance.DeleteOrganizationUserPermission(orgCode, userId, permissionId);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test DeleteOrganizationUserRole
        /// </summary>
        [Fact]
        public void DeleteOrganizationUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string userId = null;
            //string roleId = null;
            //var response = instance.DeleteOrganizationUserRole(orgCode, userId, roleId);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test GetOrganization
        /// </summary>
        [Fact]
        public void GetOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? code = null;
            //var response = instance.GetOrganization(code);
            //Assert.IsType<Organization>(response);
        }

        /// <summary>
        /// Test GetOrganizationFeatureFlags
        /// </summary>
        [Fact]
        public void GetOrganizationFeatureFlagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //var response = instance.GetOrganizationFeatureFlags(orgCode);
            //Assert.IsType<GetOrganizationFeatureFlagsResponse>(response);
        }

        /// <summary>
        /// Test GetOrganizationPropertyValues
        /// </summary>
        [Fact]
        public void GetOrganizationPropertyValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //var response = instance.GetOrganizationPropertyValues(orgCode);
            //Assert.IsType<GetPropertyValuesResponse>(response);
        }

        /// <summary>
        /// Test GetOrganizationUserPermissions
        /// </summary>
        [Fact]
        public void GetOrganizationUserPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string userId = null;
            //string? expand = null;
            //var response = instance.GetOrganizationUserPermissions(orgCode, userId, expand);
            //Assert.IsType<GetOrganizationsUserPermissionsResponse>(response);
        }

        /// <summary>
        /// Test GetOrganizationUserRoles
        /// </summary>
        [Fact]
        public void GetOrganizationUserRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string userId = null;
            //var response = instance.GetOrganizationUserRoles(orgCode, userId);
            //Assert.IsType<GetOrganizationsUserRolesResponse>(response);
        }

        /// <summary>
        /// Test GetOrganizationUsers
        /// </summary>
        [Fact]
        public void GetOrganizationUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string? sort = null;
            //int? pageSize = null;
            //string? nextToken = null;
            //string? permissions = null;
            //string? roles = null;
            //var response = instance.GetOrganizationUsers(orgCode, sort, pageSize, nextToken, permissions, roles);
            //Assert.IsType<GetOrganizationUsersResponse>(response);
        }

        /// <summary>
        /// Test GetOrganizations
        /// </summary>
        [Fact]
        public void GetOrganizationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? sort = null;
            //int? pageSize = null;
            //string? nextToken = null;
            //var response = instance.GetOrganizations(sort, pageSize, nextToken);
            //Assert.IsType<GetOrganizationsResponse>(response);
        }

        /// <summary>
        /// Test RemoveOrganizationUser
        /// </summary>
        [Fact]
        public void RemoveOrganizationUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string userId = null;
            //var response = instance.RemoveOrganizationUser(orgCode, userId);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrganization
        /// </summary>
        [Fact]
        public void UpdateOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //UpdateOrganizationRequest? updateOrganizationRequest = null;
            //var response = instance.UpdateOrganization(orgCode, updateOrganizationRequest);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrganizationFeatureFlagOverride
        /// </summary>
        [Fact]
        public void UpdateOrganizationFeatureFlagOverrideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string featureFlagKey = null;
            //string value = null;
            //var response = instance.UpdateOrganizationFeatureFlagOverride(orgCode, featureFlagKey, value);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrganizationProperties
        /// </summary>
        [Fact]
        public void UpdateOrganizationPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest = null;
            //var response = instance.UpdateOrganizationProperties(orgCode, updateOrganizationPropertiesRequest);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrganizationProperty
        /// </summary>
        [Fact]
        public void UpdateOrganizationPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //string propertyKey = null;
            //string value = null;
            //var response = instance.UpdateOrganizationProperty(orgCode, propertyKey, value);
            //Assert.IsType<SuccessResponse>(response);
        }

        /// <summary>
        /// Test UpdateOrganizationUsers
        /// </summary>
        [Fact]
        public void UpdateOrganizationUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orgCode = null;
            //UpdateOrganizationUsersRequest? updateOrganizationUsersRequest = null;
            //var response = instance.UpdateOrganizationUsers(orgCode, updateOrganizationUsersRequest);
            //Assert.IsType<UpdateOrganizationUsersResponse>(response);
        }
    }
}
