/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Kinde.ManagementApi.Client;
using Kinde.ManagementApi.Model;

namespace Kinde.ManagementApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscribersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Subscriber
        /// </summary>
        /// <remarks>
        /// Create subscriber.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Subscriber&#39;s first name.</param>
        /// <param name="lastName">Subscriber&#39;s last name.</param>
        /// <param name="email">The email address of the subscriber.</param>
        /// <returns>CreateSubscriberSuccessResponse</returns>
        CreateSubscriberSuccessResponse CreateSubscriber(string firstName, string lastName, string email);

        /// <summary>
        /// Create Subscriber
        /// </summary>
        /// <remarks>
        /// Create subscriber.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Subscriber&#39;s first name.</param>
        /// <param name="lastName">Subscriber&#39;s last name.</param>
        /// <param name="email">The email address of the subscriber.</param>
        /// <returns>ApiResponse of CreateSubscriberSuccessResponse</returns>
        ApiResponse<CreateSubscriberSuccessResponse> CreateSubscriberWithHttpInfo(string firstName, string lastName, string email);
        /// <summary>
        /// Get Subscriber
        /// </summary>
        /// <remarks>
        /// Retrieve a subscriber record. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber&#39;s id.</param>
        /// <returns>GetSubscriberResponse</returns>
        GetSubscriberResponse GetSubscriber(string subscriberId);

        /// <summary>
        /// Get Subscriber
        /// </summary>
        /// <remarks>
        /// Retrieve a subscriber record. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber&#39;s id.</param>
        /// <returns>ApiResponse of GetSubscriberResponse</returns>
        ApiResponse<GetSubscriberResponse> GetSubscriberWithHttpInfo(string subscriberId);
        /// <summary>
        /// List Subscribers
        /// </summary>
        /// <remarks>
        /// The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>GetSubscribersResponse</returns>
        GetSubscribersResponse GetSubscribers(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?));

        /// <summary>
        /// List Subscribers
        /// </summary>
        /// <remarks>
        /// The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>ApiResponse of GetSubscribersResponse</returns>
        ApiResponse<GetSubscribersResponse> GetSubscribersWithHttpInfo(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscribersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Subscriber
        /// </summary>
        /// <remarks>
        /// Create subscriber.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Subscriber&#39;s first name.</param>
        /// <param name="lastName">Subscriber&#39;s last name.</param>
        /// <param name="email">The email address of the subscriber.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubscriberSuccessResponse</returns>
        System.Threading.Tasks.Task<CreateSubscriberSuccessResponse> CreateSubscriberAsync(string firstName, string lastName, string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Subscriber
        /// </summary>
        /// <remarks>
        /// Create subscriber.
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Subscriber&#39;s first name.</param>
        /// <param name="lastName">Subscriber&#39;s last name.</param>
        /// <param name="email">The email address of the subscriber.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubscriberSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubscriberSuccessResponse>> CreateSubscriberWithHttpInfoAsync(string firstName, string lastName, string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Subscriber
        /// </summary>
        /// <remarks>
        /// Retrieve a subscriber record. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSubscriberResponse</returns>
        System.Threading.Tasks.Task<GetSubscriberResponse> GetSubscriberAsync(string subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Subscriber
        /// </summary>
        /// <remarks>
        /// Retrieve a subscriber record. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSubscriberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubscriberResponse>> GetSubscriberWithHttpInfoAsync(string subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Subscribers
        /// </summary>
        /// <remarks>
        /// The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSubscribersResponse</returns>
        System.Threading.Tasks.Task<GetSubscribersResponse> GetSubscribersAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Subscribers
        /// </summary>
        /// <remarks>
        /// The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSubscribersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubscribersResponse>> GetSubscribersWithHttpInfoAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscribersApi : ISubscribersApiSync, ISubscribersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscribersApi : IDisposable, ISubscribersApi
    {
        private Kinde.ManagementApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SubscribersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SubscribersApi(string basePath)
        {
            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                new Kinde.ManagementApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SubscribersApi(Kinde.ManagementApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscribersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscribersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                new Kinde.ManagementApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscribersApi(HttpClient client, Kinde.ManagementApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SubscribersApi(Kinde.ManagementApi.Client.ISynchronousClient client, Kinde.ManagementApi.Client.IAsynchronousClient asyncClient, Kinde.ManagementApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Kinde.ManagementApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.ManagementApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.ManagementApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.ManagementApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.ManagementApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Subscriber Create subscriber.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Subscriber&#39;s first name.</param>
        /// <param name="lastName">Subscriber&#39;s last name.</param>
        /// <param name="email">The email address of the subscriber.</param>
        /// <returns>CreateSubscriberSuccessResponse</returns>
        public CreateSubscriberSuccessResponse CreateSubscriber(string firstName, string lastName, string email)
        {
            Kinde.ManagementApi.Client.ApiResponse<CreateSubscriberSuccessResponse> localVarResponse = CreateSubscriberWithHttpInfo(firstName, lastName, email);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscriber Create subscriber.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Subscriber&#39;s first name.</param>
        /// <param name="lastName">Subscriber&#39;s last name.</param>
        /// <param name="email">The email address of the subscriber.</param>
        /// <returns>ApiResponse of CreateSubscriberSuccessResponse</returns>
        public Kinde.ManagementApi.Client.ApiResponse<CreateSubscriberSuccessResponse> CreateSubscriberWithHttpInfo(string firstName, string lastName, string email)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'firstName' when calling SubscribersApi->CreateSubscriber");

            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'lastName' when calling SubscribersApi->CreateSubscriber");

            // verify the required parameter 'email' is set
            if (email == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'email' when calling SubscribersApi->CreateSubscriber");

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "first_name", firstName));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "last_name", lastName));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "email", email));

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubscriberSuccessResponse>("/api/v1/subscribers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subscriber Create subscriber.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Subscriber&#39;s first name.</param>
        /// <param name="lastName">Subscriber&#39;s last name.</param>
        /// <param name="email">The email address of the subscriber.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubscriberSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CreateSubscriberSuccessResponse> CreateSubscriberAsync(string firstName, string lastName, string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<CreateSubscriberSuccessResponse> localVarResponse = await CreateSubscriberWithHttpInfoAsync(firstName, lastName, email, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscriber Create subscriber.
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">Subscriber&#39;s first name.</param>
        /// <param name="lastName">Subscriber&#39;s last name.</param>
        /// <param name="email">The email address of the subscriber.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubscriberSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<CreateSubscriberSuccessResponse>> CreateSubscriberWithHttpInfoAsync(string firstName, string lastName, string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'firstName' when calling SubscribersApi->CreateSubscriber");

            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'lastName' when calling SubscribersApi->CreateSubscriber");

            // verify the required parameter 'email' is set
            if (email == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'email' when calling SubscribersApi->CreateSubscriber");


            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "first_name", firstName));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "last_name", lastName));
            localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "email", email));

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubscriberSuccessResponse>("/api/v1/subscribers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscriber Retrieve a subscriber record. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber&#39;s id.</param>
        /// <returns>GetSubscriberResponse</returns>
        public GetSubscriberResponse GetSubscriber(string subscriberId)
        {
            Kinde.ManagementApi.Client.ApiResponse<GetSubscriberResponse> localVarResponse = GetSubscriberWithHttpInfo(subscriberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscriber Retrieve a subscriber record. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber&#39;s id.</param>
        /// <returns>ApiResponse of GetSubscriberResponse</returns>
        public Kinde.ManagementApi.Client.ApiResponse<GetSubscriberResponse> GetSubscriberWithHttpInfo(string subscriberId)
        {
            // verify the required parameter 'subscriberId' is set
            if (subscriberId == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'subscriberId' when calling SubscribersApi->GetSubscriber");

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriber_id", Kinde.ManagementApi.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSubscriberResponse>("/api/v1/subscribers/{subscriber_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscriber Retrieve a subscriber record. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSubscriberResponse</returns>
        public async System.Threading.Tasks.Task<GetSubscriberResponse> GetSubscriberAsync(string subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<GetSubscriberResponse> localVarResponse = await GetSubscriberWithHttpInfoAsync(subscriberId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscriber Retrieve a subscriber record. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriberId">The subscriber&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSubscriberResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<GetSubscriberResponse>> GetSubscriberWithHttpInfoAsync(string subscriberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriberId' is set
            if (subscriberId == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'subscriberId' when calling SubscribersApi->GetSubscriber");


            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("subscriber_id", Kinde.ManagementApi.Client.ClientUtils.ParameterToString(subscriberId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSubscriberResponse>("/api/v1/subscribers/{subscriber_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscribers The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>GetSubscribersResponse</returns>
        public GetSubscribersResponse GetSubscribers(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?))
        {
            Kinde.ManagementApi.Client.ApiResponse<GetSubscribersResponse> localVarResponse = GetSubscribersWithHttpInfo(sort, pageSize, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscribers The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <returns>ApiResponse of GetSubscribersResponse</returns>
        public Kinde.ManagementApi.Client.ApiResponse<GetSubscribersResponse> GetSubscribersWithHttpInfo(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?))
        {
            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSubscribersResponse>("/api/v1/subscribers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscribers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscribers The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSubscribersResponse</returns>
        public async System.Threading.Tasks.Task<GetSubscribersResponse> GetSubscribersAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<GetSubscribersResponse> localVarResponse = await GetSubscribersWithHttpInfoAsync(sort, pageSize, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscribers The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSubscribersResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<GetSubscribersResponse>> GetSubscribersWithHttpInfoAsync(string? sort = default(string?), int? pageSize = default(int?), string? nextToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kinde.ManagementApi.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSubscribersResponse>("/api/v1/subscribers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscribers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
