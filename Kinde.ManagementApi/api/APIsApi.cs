/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Kinde.ManagementApi.Client;
using Kinde.ManagementApi.Model;

namespace Kinde.ManagementApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add APIs
        /// </summary>
        /// <remarks>
        /// Add APIs. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAPIsRequest">API details.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse AddAPIs(AddAPIsRequest addAPIsRequest);

        /// <summary>
        /// Add APIs
        /// </summary>
        /// <remarks>
        /// Add APIs. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAPIsRequest">API details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> AddAPIsWithHttpInfo(AddAPIsRequest addAPIsRequest);
        /// <summary>
        /// Delete API
        /// </summary>
        /// <remarks>
        /// Deletes API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse DeleteAPI(string apiId);

        /// <summary>
        /// Delete API
        /// </summary>
        /// <remarks>
        /// Deletes API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> DeleteAPIWithHttpInfo(string apiId);
        /// <summary>
        /// List API details
        /// </summary>
        /// <remarks>
        /// Returns the details of the API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <returns>Api</returns>
        ApiModel GetAPI(string apiId);

        /// <summary>
        /// List API details
        /// </summary>
        /// <remarks>
        /// Returns the details of the API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <returns>ApiResponse of Api</returns>
        ApiResponse<ApiModel> GetAPIWithHttpInfo(string apiId);
        /// <summary>
        /// List APIs
        /// </summary>
        /// <remarks>
        /// Returns a list of APIs. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Apis</returns>
        Apis GetAPIs();

        /// <summary>
        /// List APIs
        /// </summary>
        /// <remarks>
        /// Returns a list of APIs. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Apis</returns>
        ApiResponse<Apis> GetAPIsWithHttpInfo();
        /// <summary>
        /// Update API Applications
        /// </summary>
        /// <remarks>
        /// Update the applications under that API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The identifier for the API.</param>
        /// <param name="updateAPIApplicationsRequest">The applications you want to connect or disconnect.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse UpdateAPIApplications(string apiId, UpdateAPIApplicationsRequest updateAPIApplicationsRequest);

        /// <summary>
        /// Update API Applications
        /// </summary>
        /// <remarks>
        /// Update the applications under that API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The identifier for the API.</param>
        /// <param name="updateAPIApplicationsRequest">The applications you want to connect or disconnect.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> UpdateAPIApplicationsWithHttpInfo(string apiId, UpdateAPIApplicationsRequest updateAPIApplicationsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add APIs
        /// </summary>
        /// <remarks>
        /// Add APIs. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAPIsRequest">API details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> AddAPIsAsync(AddAPIsRequest addAPIsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add APIs
        /// </summary>
        /// <remarks>
        /// Add APIs. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAPIsRequest">API details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> AddAPIsWithHttpInfoAsync(AddAPIsRequest addAPIsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete API
        /// </summary>
        /// <remarks>
        /// Deletes API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> DeleteAPIAsync(string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete API
        /// </summary>
        /// <remarks>
        /// Deletes API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> DeleteAPIWithHttpInfoAsync(string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List API details
        /// </summary>
        /// <remarks>
        /// Returns the details of the API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Api</returns>
        System.Threading.Tasks.Task<ApiModel> GetAPIAsync(string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List API details
        /// </summary>
        /// <remarks>
        /// Returns the details of the API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Api)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiModel>> GetAPIWithHttpInfoAsync(string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List APIs
        /// </summary>
        /// <remarks>
        /// Returns a list of APIs. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Apis</returns>
        System.Threading.Tasks.Task<Apis> GetAPIsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List APIs
        /// </summary>
        /// <remarks>
        /// Returns a list of APIs. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Apis)</returns>
        System.Threading.Tasks.Task<ApiResponse<Apis>> GetAPIsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update API Applications
        /// </summary>
        /// <remarks>
        /// Update the applications under that API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The identifier for the API.</param>
        /// <param name="updateAPIApplicationsRequest">The applications you want to connect or disconnect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> UpdateAPIApplicationsAsync(string apiId, UpdateAPIApplicationsRequest updateAPIApplicationsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update API Applications
        /// </summary>
        /// <remarks>
        /// Update the applications under that API. 
        /// </remarks>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The identifier for the API.</param>
        /// <param name="updateAPIApplicationsRequest">The applications you want to connect or disconnect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> UpdateAPIApplicationsWithHttpInfoAsync(string apiId, UpdateAPIApplicationsRequest updateAPIApplicationsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIsApi : IAPIsApiSync, IAPIsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class APIsApi : IDisposable, IAPIsApi
    {
        private Kinde.ManagementApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="APIsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public APIsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public APIsApi(string basePath)
        {
            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                new Kinde.ManagementApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public APIsApi(Kinde.ManagementApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public APIsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public APIsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                new Kinde.ManagementApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public APIsApi(HttpClient client, Kinde.ManagementApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Kinde.ManagementApi.Client.Configuration.MergeConfigurations(
                Kinde.ManagementApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Kinde.ManagementApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public APIsApi(Kinde.ManagementApi.Client.ISynchronousClient client, Kinde.ManagementApi.Client.IAsynchronousClient asyncClient, Kinde.ManagementApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kinde.ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Kinde.ManagementApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kinde.ManagementApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kinde.ManagementApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kinde.ManagementApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kinde.ManagementApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add APIs Add APIs. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAPIsRequest">API details.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse AddAPIs(AddAPIsRequest addAPIsRequest)
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = AddAPIsWithHttpInfo(addAPIsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add APIs Add APIs. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAPIsRequest">API details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> AddAPIsWithHttpInfo(AddAPIsRequest addAPIsRequest)
        {
            // verify the required parameter 'addAPIsRequest' is set
            if (addAPIsRequest == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'addAPIsRequest' when calling APIsApi->AddAPIs");

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addAPIsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessResponse>("/api/v1/apis", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAPIs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add APIs Add APIs. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAPIsRequest">API details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> AddAPIsAsync(AddAPIsRequest addAPIsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = await AddAPIsWithHttpInfoAsync(addAPIsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add APIs Add APIs. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAPIsRequest">API details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<SuccessResponse>> AddAPIsWithHttpInfoAsync(AddAPIsRequest addAPIsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addAPIsRequest' is set
            if (addAPIsRequest == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'addAPIsRequest' when calling APIsApi->AddAPIs");


            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addAPIsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessResponse>("/api/v1/apis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAPIs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete API Deletes API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse DeleteAPI(string apiId)
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = DeleteAPIWithHttpInfo(apiId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete API Deletes API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> DeleteAPIWithHttpInfo(string apiId)
        {
            // verify the required parameter 'apiId' is set
            if (apiId == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'apiId' when calling APIsApi->DeleteAPI");

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("api_id", Kinde.ManagementApi.Client.ClientUtils.ParameterToString(apiId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessResponse>("/api/v1/apis/{api_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAPI", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete API Deletes API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> DeleteAPIAsync(string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = await DeleteAPIWithHttpInfoAsync(apiId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete API Deletes API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<SuccessResponse>> DeleteAPIWithHttpInfoAsync(string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiId' is set
            if (apiId == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'apiId' when calling APIsApi->DeleteAPI");


            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("api_id", Kinde.ManagementApi.Client.ClientUtils.ParameterToString(apiId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessResponse>("/api/v1/apis/{api_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAPI", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List API details Returns the details of the API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <returns>Api</returns>
        public ApiModel GetAPI(string apiId)
        {
            Kinde.ManagementApi.Client.ApiResponse<ApiModel> localVarResponse = GetAPIWithHttpInfo(apiId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List API details Returns the details of the API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <returns>ApiResponse of Api</returns>
        public Kinde.ManagementApi.Client.ApiResponse<ApiModel> GetAPIWithHttpInfo(string apiId)
        {
            // verify the required parameter 'apiId' is set
            if (apiId == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'apiId' when calling APIsApi->GetAPI");

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("api_id", Kinde.ManagementApi.Client.ClientUtils.ParameterToString(apiId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiModel>("/api/v1/apis/{api_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAPI", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List API details Returns the details of the API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Api</returns>
        public async System.Threading.Tasks.Task<ApiModel> GetAPIAsync(string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<ApiModel> localVarResponse = await GetAPIWithHttpInfoAsync(apiId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List API details Returns the details of the API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The API&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Api)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<ApiModel>> GetAPIWithHttpInfoAsync(string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiId' is set
            if (apiId == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'apiId' when calling APIsApi->GetAPI");


            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("api_id", Kinde.ManagementApi.Client.ClientUtils.ParameterToString(apiId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiModel>("/api/v1/apis/{api_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAPI", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List APIs Returns a list of APIs. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Apis</returns>
        public Apis GetAPIs()
        {
            Kinde.ManagementApi.Client.ApiResponse<Apis> localVarResponse = GetAPIsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List APIs Returns a list of APIs. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Apis</returns>
        public Kinde.ManagementApi.Client.ApiResponse<Apis> GetAPIsWithHttpInfo()
        {
            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Apis>("/api/v1/apis", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAPIs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List APIs Returns a list of APIs. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Apis</returns>
        public async System.Threading.Tasks.Task<Apis> GetAPIsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<Apis> localVarResponse = await GetAPIsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List APIs Returns a list of APIs. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Apis)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<Apis>> GetAPIsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Apis>("/api/v1/apis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAPIs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API Applications Update the applications under that API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The identifier for the API.</param>
        /// <param name="updateAPIApplicationsRequest">The applications you want to connect or disconnect.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse UpdateAPIApplications(string apiId, UpdateAPIApplicationsRequest updateAPIApplicationsRequest)
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = UpdateAPIApplicationsWithHttpInfo(apiId, updateAPIApplicationsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update API Applications Update the applications under that API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The identifier for the API.</param>
        /// <param name="updateAPIApplicationsRequest">The applications you want to connect or disconnect.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> UpdateAPIApplicationsWithHttpInfo(string apiId, UpdateAPIApplicationsRequest updateAPIApplicationsRequest)
        {
            // verify the required parameter 'apiId' is set
            if (apiId == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'apiId' when calling APIsApi->UpdateAPIApplications");

            // verify the required parameter 'updateAPIApplicationsRequest' is set
            if (updateAPIApplicationsRequest == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'updateAPIApplicationsRequest' when calling APIsApi->UpdateAPIApplications");

            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };

            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("api_id", Kinde.ManagementApi.Client.ClientUtils.ParameterToString(apiId)); // path parameter
            localVarRequestOptions.Data = updateAPIApplicationsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SuccessResponse>("/api/v1/apis/{api_id}/applications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAPIApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API Applications Update the applications under that API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The identifier for the API.</param>
        /// <param name="updateAPIApplicationsRequest">The applications you want to connect or disconnect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> UpdateAPIApplicationsAsync(string apiId, UpdateAPIApplicationsRequest updateAPIApplicationsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kinde.ManagementApi.Client.ApiResponse<SuccessResponse> localVarResponse = await UpdateAPIApplicationsWithHttpInfoAsync(apiId, updateAPIApplicationsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update API Applications Update the applications under that API. 
        /// </summary>
        /// <exception cref="Kinde.ManagementApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiId">The identifier for the API.</param>
        /// <param name="updateAPIApplicationsRequest">The applications you want to connect or disconnect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Kinde.ManagementApi.Client.ApiResponse<SuccessResponse>> UpdateAPIApplicationsWithHttpInfoAsync(string apiId, UpdateAPIApplicationsRequest updateAPIApplicationsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiId' is set
            if (apiId == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'apiId' when calling APIsApi->UpdateAPIApplications");

            // verify the required parameter 'updateAPIApplicationsRequest' is set
            if (updateAPIApplicationsRequest == null)
                throw new Kinde.ManagementApi.Client.ApiException(400, "Missing required parameter 'updateAPIApplicationsRequest' when calling APIsApi->UpdateAPIApplications");


            Kinde.ManagementApi.Client.RequestOptions localVarRequestOptions = new Kinde.ManagementApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "application/json"
            };


            var localVarContentType = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Kinde.ManagementApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("api_id", Kinde.ManagementApi.Client.ClientUtils.ParameterToString(apiId)); // path parameter
            localVarRequestOptions.Data = updateAPIApplicationsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SuccessResponse>("/api/v1/apis/{api_id}/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAPIApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
