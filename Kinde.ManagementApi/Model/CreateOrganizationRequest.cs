/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.ManagementApi.Client.FileParameter;
using OpenAPIDateConverter = Kinde.ManagementApi.Client.OpenAPIDateConverter;

namespace Kinde.ManagementApi.Model
{
    /// <summary>
    /// CreateOrganizationRequest
    /// </summary>
    [DataContract(Name = "createOrganization_request")]
    public partial class CreateOrganizationRequest : IValidatableObject
    {
        /// <summary>
        /// Value of the feature flag.
        /// </summary>
        /// <value>Value of the feature flag.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InnerEnum
        {
            /// <summary>
            /// Enum Str for value: str
            /// </summary>
            [EnumMember(Value = "str")]
            Str = 1,

            /// <summary>
            /// Enum Int for value: int
            /// </summary>
            [EnumMember(Value = "int")]
            Int = 2,

            /// <summary>
            /// Enum Bool for value: bool
            /// </summary>
            [EnumMember(Value = "bool")]
            Bool = 3
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrganizationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateOrganizationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrganizationRequest" /> class.
        /// </summary>
        /// <param name="name">The organization&#39;s name. (required).</param>
        /// <param name="featureFlags">The organization&#39;s feature flag settings..</param>
        /// <param name="externalId">The organization&#39;s ID..</param>
        /// <param name="backgroundColor">The organization&#39;s brand settings - background color..</param>
        /// <param name="buttonColor">The organization&#39;s brand settings - button color..</param>
        /// <param name="buttonTextColor">The organization&#39;s brand settings - button text color..</param>
        /// <param name="linkColor">The organization&#39;s brand settings - link color..</param>
        /// <param name="backgroundColorDark">The organization&#39;s brand settings - dark mode background color..</param>
        /// <param name="buttonColorDark">The organization&#39;s brand settings - dark mode button color..</param>
        /// <param name="buttonTextColorDark">The organization&#39;s brand settings - dark mode button text color..</param>
        /// <param name="linkColorDark">The organization&#39;s brand settings - dark mode link color..</param>
        /// <param name="themeCode">The organization&#39;s brand settings - theme/mode &#39;light&#39; | &#39;dark&#39; | &#39;user_preference&#39;..</param>
        /// <param name="handle">The organization&#39;s handle..</param>
        /// <param name="isAllowRegistrations">Users can sign up to this organization..</param>
        public CreateOrganizationRequest(string name = default(string), Dictionary<string, InnerEnum> featureFlags = default(Dictionary<string, InnerEnum>), string externalId = default(string), string backgroundColor = default(string), string buttonColor = default(string), string buttonTextColor = default(string), string linkColor = default(string), string backgroundColorDark = default(string), string buttonColorDark = default(string), string buttonTextColorDark = default(string), string linkColorDark = default(string), string themeCode = default(string), string handle = default(string), bool isAllowRegistrations = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateOrganizationRequest and cannot be null");
            }
            this.Name = name;
            this.FeatureFlags = featureFlags;
            this.ExternalId = externalId;
            this.BackgroundColor = backgroundColor;
            this.ButtonColor = buttonColor;
            this.ButtonTextColor = buttonTextColor;
            this.LinkColor = linkColor;
            this.BackgroundColorDark = backgroundColorDark;
            this.ButtonColorDark = buttonColorDark;
            this.ButtonTextColorDark = buttonTextColorDark;
            this.LinkColorDark = linkColorDark;
            this.ThemeCode = themeCode;
            this.Handle = handle;
            this.IsAllowRegistrations = isAllowRegistrations;
        }

        /// <summary>
        /// The organization&#39;s name.
        /// </summary>
        /// <value>The organization&#39;s name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The organization&#39;s feature flag settings.
        /// </summary>
        /// <value>The organization&#39;s feature flag settings.</value>
        [DataMember(Name = "feature_flags", EmitDefaultValue = false)]
        public Dictionary<string, CreateOrganizationRequest.InnerEnum> FeatureFlags { get; set; }

        /// <summary>
        /// The organization&#39;s ID.
        /// </summary>
        /// <value>The organization&#39;s ID.</value>
        [DataMember(Name = "external_id", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - background color.</value>
        [DataMember(Name = "background_color", EmitDefaultValue = false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button color.</value>
        [DataMember(Name = "button_color", EmitDefaultValue = false)]
        public string ButtonColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button text color.</value>
        [DataMember(Name = "button_text_color", EmitDefaultValue = false)]
        public string ButtonTextColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - link color.</value>
        [DataMember(Name = "link_color", EmitDefaultValue = false)]
        public string LinkColor { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode background color.</value>
        [DataMember(Name = "background_color_dark", EmitDefaultValue = false)]
        public string BackgroundColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button color.</value>
        [DataMember(Name = "button_color_dark", EmitDefaultValue = false)]
        public string ButtonColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button text color.</value>
        [DataMember(Name = "button_text_color_dark", EmitDefaultValue = false)]
        public string ButtonTextColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode link color.</value>
        [DataMember(Name = "link_color_dark", EmitDefaultValue = false)]
        public string LinkColorDark { get; set; }

        /// <summary>
        /// The organization&#39;s brand settings - theme/mode &#39;light&#39; | &#39;dark&#39; | &#39;user_preference&#39;.
        /// </summary>
        /// <value>The organization&#39;s brand settings - theme/mode &#39;light&#39; | &#39;dark&#39; | &#39;user_preference&#39;.</value>
        [DataMember(Name = "theme_code", EmitDefaultValue = false)]
        public string ThemeCode { get; set; }

        /// <summary>
        /// The organization&#39;s handle.
        /// </summary>
        /// <value>The organization&#39;s handle.</value>
        [DataMember(Name = "handle", EmitDefaultValue = false)]
        public string Handle { get; set; }

        /// <summary>
        /// Users can sign up to this organization.
        /// </summary>
        /// <value>Users can sign up to this organization.</value>
        [DataMember(Name = "is_allow_registrations", EmitDefaultValue = true)]
        public bool IsAllowRegistrations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOrganizationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FeatureFlags: ").Append(FeatureFlags).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ButtonColor: ").Append(ButtonColor).Append("\n");
            sb.Append("  ButtonTextColor: ").Append(ButtonTextColor).Append("\n");
            sb.Append("  LinkColor: ").Append(LinkColor).Append("\n");
            sb.Append("  BackgroundColorDark: ").Append(BackgroundColorDark).Append("\n");
            sb.Append("  ButtonColorDark: ").Append(ButtonColorDark).Append("\n");
            sb.Append("  ButtonTextColorDark: ").Append(ButtonTextColorDark).Append("\n");
            sb.Append("  LinkColorDark: ").Append(LinkColorDark).Append("\n");
            sb.Append("  ThemeCode: ").Append(ThemeCode).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  IsAllowRegistrations: ").Append(IsAllowRegistrations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
